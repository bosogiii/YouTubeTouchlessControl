<!-- 1~5 : youtube api step -->

<!DOCTYPE html>
<html>
<head>
    <script src="https://npmcdn.com/axios/dist/axios.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <link type="text/css" href="CSS/Button.css" rel="stylesheet" />

    <style>    
    form{
      sytle="display: inline"
    }
     a:link  { text-decoration: none; color: #000}
     a:visited  { text-decoration: none; color: #000}

    #Head {
    padding: 30px;
    background-color: blue;


    text-align: center; 
    font-size: 2.4em;
    text-shadow: 3px 3px #000;
    }
    #grid{
      border : 3px solid gray;
      display : grid;
      grid-template-columns: 200px 1fr;
    }
    .setgrid{
      display : grid;
      grid-template-columns: 80px 1fr;
    }
    #dgrid{
      display : grid;
      grid-template-columns: 100px 100px 100px 100px;
      grid-gap: 10px;
    }
    #deletegrid{
      border : 3px solid white;
    }
    #right{
      padding-left : 5px;
    }
    </style>
</head>
  <body>
    <header id="Head"><a href="/" style="color:white">NEWS Today</a></header>
    <div id="grid">
    <div class="leftgrid">
      <h2>1.Motions</h2>
    </div >
    <div id="right">
      <div id="player"></div>

    </div>
    </div>

    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <!-- <div id="player"></div> -->

    <script>
      //to load video list from youtube
      //default : get 10 videos in vidList
      //YOUTUBE DATA API v3. Search
      //help for params : https://developers.google.com/youtube/v3/docs/search/list#--

      var optionParams={
        q:"뉴스",
        part:"id",
        channelId:"UCTHCOPwqNfZ0uiKOvFyhGwg",
        key:"AIzaSyD00N6Vnz9LFFQafkO-EVvGLnGeQtf4hcU",
        order:"date",
        type:"video",
        maxResults:20,
        regionCode:"KR",
        videoDuration:"short"
       };

      //한글을 검색어로 전달하기 위해선 url encoding 필요!
      optionParams.q=encodeURI(optionParams.q);

      var url="https://www.googleapis.com/youtube/v3/search?";
      for(var option in optionParams){
        url+=option+"="+optionParams[option]+"&";
      }

      //url의마지막에 붙어있는 & 정리
      url=url.substr(0, url.length-1);
      var vidList = []; 

            function getVideoList(){
              axios.get(url)
                .then((res) => {
      var vid = res.data.items;

      for(var content in vid){
        vidList.push(vid[content].id.videoId)
      }
      console.log(vidList);
                })
                .catch((res) => {
                    console.log('failed to load VideoList');
                })
            }
      getVideoList();



      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;

//360*640
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '450',
          width: '800',
          loadPlaylist:{
          listType:'playlist',
          list: vidList,
          index:parseInt(0),
          suggestedQuality:'small'
        },
          // videoId: ['liJVSwOiiwg','XNSNti8q_UQ']
          events: {
            'onReady': onPlayerReady,
            //'onStateChange': onPlayerStateChange
          }
        });
      }
      
      var isPlayed = false;
      var isMuted = false;

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.loadPlaylist(vidList);
        player.playVideo();
        isPlayed = true;
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 1000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }



      function resMsg() {

        console.log('resMSG');
         axios.get('http://localhost:3000/msg')
          .then((res) => {
          if(res.data.data == 'play' && !isPlayed){
            player.playVideo();
            isPlayed = true;
          }
          if(res.data.data == 'pause' && isPlayed){
            player.pauseVideo();
            isPlayed = false;
          }
          if(res.data.data == 'next'){
            player.nextVideo();
          }
          if(res.data.data == 'previous'){
            player.previousVideo();
          }
          if(res.data.data == 'mute' && !isMuted){
            player.mute();
            isMuted = true;
          }
          if(res.data.data == 'unmute' && isMuted){
            player.unMute();
            isMuted = false;
          }
          console.log("isPlayed : "+isPlayed);
          console.log("isMuted : "+isMuted);
          resMsg();
          })
          .catch((res) => {
              console.log('get fail');
              setTimeout(resMsg, 5000);
          })
      }
      resMsg();

    </script>
  </body>
</html>